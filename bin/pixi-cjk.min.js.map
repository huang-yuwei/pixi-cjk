{"version":3,"file":"pixi-cjk.min.js","sources":["../src/KinsokuShori.ts","../src/BreakableChars.ts","../src/index.ts"],"sourcesContent":["import * as PIXI from 'pixi.js';\n\n// Line breaking rules in CJK (Kinsoku Shori)\n// Refer from https://en.wikipedia.org/wiki/Line_breaking_rules_in_East_Asian_languages\nconst regexCannotStartZhCn = /[!%),.:;?\\]}¢°·'\"\"†‡›℃∶、。〃〆〕〗〞﹚﹜！＂％＇），．：；？！］｝～]/;\nconst regexCannotEndZhCn = /[$(£¥·'\"〈《「『【〔〖〝﹙﹛＄（．［｛￡￥]/;\nconst regexCannotStartZhTw = /[!),.:;?\\]}¢·–—'\"•\"、。〆〞〕〉》」︰︱︲︳﹐﹑﹒﹓﹔﹕﹖﹘﹚﹜！），．：；？︶︸︺︼︾﹀﹂﹗］｜｝､]/;\nconst regexCannotEndZhTw = /[([{£¥'\"‵〈《「『〔〝︴﹙﹛（｛︵︷︹︻︽︿﹁﹃﹏]/;\nconst regexCannotStartJaJp = /[)\\]｝〕〉》」』】〙〗〟'\"｠»ヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻‐゠–〜?!‼⁇⁈⁉・、:;,。.]/;\nconst regexCannotEndJaJp = /[([｛〔〈《「『【〘〖〝'\"｟«—...‥〳〴〵]/;\nconst regexCannotStartKoKr = /[!%),.:;?\\]}¢°'\"†‡℃〆〈《「『〕！％），．：；？］｝]/;\nconst regexCannotEndKoKr = /[$([{£¥'\"々〇〉》」〔＄（［｛｠￥￦#]/;\n\nconst regexCannotStart = new RegExp(\n  `${regexCannotStartZhCn.source}|${regexCannotStartZhTw.source}|${regexCannotStartJaJp.source}|${regexCannotStartKoKr.source}`,\n);\nconst regexCannotEnd = new RegExp(\n  `${regexCannotEndZhCn.source}|${regexCannotEndZhTw.source}|${regexCannotEndJaJp.source}|${regexCannotEndKoKr.source}`,\n);\n\nexport const shouldBreakByKinsokuShorui = (\n  char: string | undefined,\n  nextChar?: string,\n): boolean => {\n  if (PIXI.TextMetrics.isBreakingSpace(nextChar)) return false;\n\n  if (char) {\n    // Line breaking rules in CJK (Kinsoku Shori)\n    if (regexCannotEnd.exec(nextChar) || regexCannotStart.exec(char)) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport const trimByKinsokuShorui = (prev: string[]): string[] => {\n  const next = [...prev];\n  const prevLine = next[next.length - 2];\n  const lastChar = prevLine[prevLine.length - 1];\n\n  next[next.length - 2] = prevLine.slice(0, -1);\n  next[next.length - 1] = (lastChar || '') + next[next.length - 1];\n  return next;\n};\n","import * as PIXI from 'pixi.js';\n\nconst LATIN_REGEX = /[a-zA-Z0-9\\u00C0-\\u00D6\\u00D8-\\u00f6\\u00f8-\\u00ff!\"#$%&'()*+,-./:;]/;\n\nexport const canBreakInLastChar = (char: string | undefined): boolean => {\n  if (char && LATIN_REGEX.test(char)) return false;\n  return true;\n};\n\nexport const trimToBreakable = (prev: string[]): string[] => {\n  const next = [...prev];\n  const prevLine = next[next.length - 2];\n\n  const index = findBreakableIndex(prevLine);\n  if (index === -1 || !prevLine) return next;\n\n  const trimmedChar = prevLine.slice(index, index + 1);\n  const isTrimmedWithSpace = PIXI.TextMetrics.isBreakingSpace(trimmedChar);\n\n  const trimFrom = index + 1;\n  const trimTo = index + (isTrimmedWithSpace ? 0 : 1);\n  next[next.length - 1] += prevLine.slice(trimFrom, prevLine.length);\n  next[next.length - 2] = prevLine.slice(0, trimTo);\n\n  return next;\n};\n\nexport const sumTextWidthByCache = (\n  text: string,\n  cache: { [key in string]: number },\n) => {\n  return text.split('').reduce((sum: number, c) => {\n    if (!cache[c]) throw Error('cannot count the word without cache');\n    return sum + cache[c];\n  }, 0);\n};\n\nexport const findBreakableIndex = (line: string): number => {\n  for (let i = line.length - 1; i >= 0; i--) {\n    if (!LATIN_REGEX.test(line[i])) return i;\n  }\n  return -1;\n};\n","import * as PIXI from 'pixi.js';\nimport {\n  trimByKinsokuShorui,\n  shouldBreakByKinsokuShorui,\n} from './KinsokuShori';\nimport {\n  trimToBreakable,\n  canBreakInLastChar,\n  sumTextWidthByCache,\n} from './BreakableChars';\n\n// @ts-ignore\nPIXI.TextMetrics.wordWrap = function (\n  text: string,\n  { wordWrapWidth, letterSpacing }: PIXI.TextStyle,\n  canvasTarget?: HTMLCanvasElement,\n): string {\n  const canvas = canvasTarget || PIXI.TextMetrics._canvas;\n  const context = canvas.getContext('2d');\n  const maxWidth = wordWrapWidth + letterSpacing;\n\n  let lines: string[] = [];\n  let currentIndex = 0;\n  let currentWidth = 0;\n\n  const cache: { [key in string]: number } = {};\n  const calcWidth = (char: string): number => {\n    return this.getFromCache(char, letterSpacing, cache, context);\n  };\n\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    const prevChar = text[i - 1];\n    const nextChar = text[i + 1];\n    const width = calcWidth(char);\n\n    if (this.isNewline(char)) {\n      currentIndex++;\n      currentWidth = 0;\n      lines[currentIndex] = '';\n      continue;\n    }\n\n    if (currentWidth + width > maxWidth) {\n      currentIndex++;\n      currentWidth = 0;\n      lines[currentIndex] = '';\n\n      if (this.isBreakingSpace(char)) {\n        continue;\n      }\n\n      if (!canBreakInLastChar(char)) {\n        lines = trimToBreakable(lines);\n        currentWidth = sumTextWidthByCache(lines[currentIndex] || '', cache);\n      }\n\n      if (shouldBreakByKinsokuShorui(char, nextChar)) {\n        lines = trimByKinsokuShorui(lines);\n        currentWidth += calcWidth(prevChar || '');\n      }\n    }\n\n    currentWidth += width;\n    lines[currentIndex] = (lines[currentIndex] || '') + char;\n  }\n  return lines.join('\\n');\n};\n"],"names":["regexCannotStart","RegExp","source","regexCannotEnd","shouldBreakByKinsokuShorui","char","nextChar","PIXI.TextMetrics","isBreakingSpace","exec","trimByKinsokuShorui","prev","next","prevLine","length","lastChar","slice","LATIN_REGEX","canBreakInLastChar","test","trimToBreakable","index","findBreakableIndex","trimmedChar","trimFrom","trimTo","sumTextWidthByCache","text","cache","split","reduce","sum","c","Error","line","i","wordWrap","wordWrapWidth","letterSpacing","canvasTarget","context","_canvas","getContext","maxWidth","lines","currentIndex","currentWidth","calcWidth","this","getFromCache","prevChar","width","isNewline","join"],"mappings":";;;;;;;4RAIA,MASMA,EAAmB,IAAIC,OAC3B,GAV2B,kDAUHC,UARG,gEAQ4BA,UAN5B,oFAM2DA,UAJ3D,uCAI0FA,UAEjHC,EAAiB,IAAIF,OACzB,GAZyB,6BAYHC,UAVG,iCAU0BA,UAR1B,6BAQuDA,UANvD,2BAMoFA,UAGlGE,EAA6B,CACxCC,EACAC,KAEIC,cAAiBC,gBAAgBF,OAEjCD,IAEEF,EAAeM,KAAKH,KAAaN,EAAiBS,KAAKJ,IAOlDK,EAAuBC,IAClC,MAAMC,EAAO,IAAID,GACXE,EAAWD,EAAKA,EAAKE,OAAS,GAC9BC,EAAWF,EAASA,EAASC,OAAS,GAI5C,OAFAF,EAAKA,EAAKE,OAAS,GAAKD,EAASG,MAAM,GAAI,GAC3CJ,EAAKA,EAAKE,OAAS,IAAMC,GAAY,IAAMH,EAAKA,EAAKE,OAAS,GACvDF,GCxCHK,EAAc,sEAEPC,EAAsBb,IAC7BA,IAAQY,EAAYE,KAAKd,GAIlBe,EAAmBT,IAC9B,MAAMC,EAAO,IAAID,GACXE,EAAWD,EAAKA,EAAKE,OAAS,GAE9BO,EAAQC,EAAmBT,GACjC,IAAe,IAAXQ,IAAiBR,EAAU,OAAOD,EAEtC,MAAMW,EAAcV,EAASG,MAAMK,EAAOA,EAAQ,GAG5CG,EAAWH,EAAQ,EACnBI,EAASJ,GAHYd,cAAiBC,gBAAgBe,GAGf,EAAI,GAIjD,OAHAX,EAAKA,EAAKE,OAAS,IAAMD,EAASG,MAAMQ,EAAUX,EAASC,QAC3DF,EAAKA,EAAKE,OAAS,GAAKD,EAASG,MAAM,EAAGS,GAEnCb,GAGIc,EAAsB,CACjCC,EACAC,IAEOD,EAAKE,MAAM,IAAIC,QAAO,CAACC,EAAaC,KACzC,IAAKJ,EAAMI,GAAI,MAAMC,MAAM,uCAC3B,OAAOF,EAAMH,EAAMI,KAClB,GAGQV,EAAsBY,IACjC,IAAK,IAAIC,EAAID,EAAKpB,OAAS,EAAGqB,GAAK,EAAGA,IACpC,IAAKlB,EAAYE,KAAKe,EAAKC,IAAK,OAAOA,EAEzC,OAAQ,iBC7BOC,SAAW,SAC1BT,GACAU,cAAEA,EAAaC,cAAEA,GACjBC,GAEA,MACMC,GADSD,GAAgBhC,cAAiBkC,SACzBC,WAAW,MAC5BC,EAAWN,EAAgBC,EAEjC,IAAIM,EAAkB,GAClBC,EAAe,EACfC,EAAe,EAEnB,MAAMlB,EAAqC,GACrCmB,EAAa1C,GACV2C,KAAKC,aAAa5C,EAAMiC,EAAeV,EAAOY,GAGvD,IAAK,IAAIL,EAAI,EAAGA,EAAIR,EAAKb,OAAQqB,IAAK,CACpC,MAAM9B,EAAOsB,EAAKQ,GACZe,EAAWvB,EAAKQ,EAAI,GACpB7B,EAAWqB,EAAKQ,EAAI,GACpBgB,EAAQJ,EAAU1C,GAExB,GAAI2C,KAAKI,UAAU/C,GACjBwC,IACAC,EAAe,EACfF,EAAMC,GAAgB,OAHxB,CAOA,GAAIC,EAAeK,EAAQR,EAAU,CAKnC,GAJAE,IACAC,EAAe,EACfF,EAAMC,GAAgB,GAElBG,KAAKxC,gBAAgBH,GACvB,SAGGa,EAAmBb,KACtBuC,EAAQxB,EAAgBwB,GACxBE,EAAepB,EAAoBkB,EAAMC,IAAiB,GAAIjB,IAG5DxB,EAA2BC,EAAMC,KACnCsC,EAAQlC,EAAoBkC,GAC5BE,GAAgBC,EAAUG,GAAY,KAI1CJ,GAAgBK,EAChBP,EAAMC,IAAiBD,EAAMC,IAAiB,IAAMxC,GAEtD,OAAOuC,EAAMS,KAAK"}